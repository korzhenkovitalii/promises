{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAO,CACXC,OAAQC,SAASC,cAAc,QAC/BC,QAASF,SAASC,cAAc,uBAChCE,OAAQH,SAASC,cAAc,sBAC/BG,SAAUJ,SAASC,cAAc,yBAgCnC,SAASI,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,WACLH,EACFF,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,YAEpBA,MAvCPT,EAAKC,OAAOgB,iBAAiB,UAE7B,SAAsBC,GACpBA,EAAMC,iBAEN,IAAIC,EAAQC,OAAOrB,EAAKI,QAAQkB,OAC5BC,EAAOF,OAAOrB,EAAKK,OAAOiB,OAC1BE,EAASH,OAAOrB,EAAKM,SAASgB,OAElC,GAAIF,EAAQ,GAAKG,EAAO,GAAKC,GAAU,EAErC,YADAC,MAAM,+BAIRC,QAAQC,IAAIP,EAAOG,EAAMC,GAEzB,IAAK,IAAII,EAAW,EAAGA,EAAWJ,EAAQI,IACxCrB,EAAcqB,EAAUR,GACrBS,MAAK,SAAAC,G,IAAGtB,EAAQsB,EAARtB,SAAUC,EAAKqB,EAALrB,MACjBsB,EAAAjC,GAASkC,OAAOC,QAAQ,oBAAmCC,OAAf1B,EAAS,QAAY0B,OAANzB,EAAM,UAElE0B,OAAM,SAAAL,G,IAAGtB,EAAQsB,EAARtB,SAAUC,EAAKqB,EAALrB,MAClBsB,EAAAjC,GAASkC,OAAOI,QAAQ,oBAAmCF,OAAf1B,EAAS,QAAY0B,OAANzB,EAAM,UAGrEW,GAASG,K","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst refs = {\n  formEl: document.querySelector('form'),\n  delayEl: document.querySelector('input[name=\"delay\"]'),\n  stepEl: document.querySelector('input[name=\"step\"]'),\n  amountEl: document.querySelector('input[name=\"amount\"]'),\n};\n\nrefs.formEl.addEventListener('submit', onFormSubmit);\n\nfunction onFormSubmit(event) {\n  event.preventDefault();\n\n  let delay = Number(refs.delayEl.value);\n  let step = Number(refs.stepEl.value);\n  let amount = Number(refs.amountEl.value);\n\n  if (delay < 0 || step < 0 || amount <= 0) {\n    alert('Вводимые данные некоректны!');\n    return;\n  }\n\n  console.log(delay, step, amount);\n\n  for (let position = 1; position < amount; position++) {\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(`Fulfiled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n      });\n\n    delay += step;\n  }\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$iU1Pc","parcelRequire","$ce04d3a99e08e73b$var$refs","formEl","document","querySelector","delayEl","stepEl","amountEl","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","event","preventDefault","delay1","Number","value","step","amount","alert","console","log","position1","then","param","$parcel$interopDefault","Notify","success","concat","catch","failure"],"version":3,"file":"03-promises.3c8c51ae.js.map"}